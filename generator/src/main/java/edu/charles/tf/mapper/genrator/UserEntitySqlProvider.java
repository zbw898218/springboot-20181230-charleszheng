package edu.charles.tf.mapper.genrator;

import edu.charles.tf.entity.UserEntityExample.Criteria;
import edu.charles.tf.entity.UserEntityExample.Criterion;
import edu.charles.tf.entity.UserEntityExample;
import edu.charles.tf.entity.UserEntityWithBLOBs;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class UserEntitySqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String countByExample(UserEntityExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("user");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String deleteByExample(UserEntityExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("user");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String insertSelective(UserEntityWithBLOBs record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("user");
        
        if (record.getHost() != null) {
            sql.VALUES("Host", "#{host,jdbcType=CHAR}");
        }
        
        if (record.getUser() != null) {
            sql.VALUES("User", "#{user,jdbcType=CHAR}");
        }
        
        if (record.getSelectPriv() != null) {
            sql.VALUES("Select_priv", "#{selectPriv,jdbcType=CHAR}");
        }
        
        if (record.getInsertPriv() != null) {
            sql.VALUES("Insert_priv", "#{insertPriv,jdbcType=CHAR}");
        }
        
        if (record.getUpdatePriv() != null) {
            sql.VALUES("Update_priv", "#{updatePriv,jdbcType=CHAR}");
        }
        
        if (record.getDeletePriv() != null) {
            sql.VALUES("Delete_priv", "#{deletePriv,jdbcType=CHAR}");
        }
        
        if (record.getCreatePriv() != null) {
            sql.VALUES("Create_priv", "#{createPriv,jdbcType=CHAR}");
        }
        
        if (record.getDropPriv() != null) {
            sql.VALUES("Drop_priv", "#{dropPriv,jdbcType=CHAR}");
        }
        
        if (record.getReloadPriv() != null) {
            sql.VALUES("Reload_priv", "#{reloadPriv,jdbcType=CHAR}");
        }
        
        if (record.getShutdownPriv() != null) {
            sql.VALUES("Shutdown_priv", "#{shutdownPriv,jdbcType=CHAR}");
        }
        
        if (record.getProcessPriv() != null) {
            sql.VALUES("Process_priv", "#{processPriv,jdbcType=CHAR}");
        }
        
        if (record.getFilePriv() != null) {
            sql.VALUES("File_priv", "#{filePriv,jdbcType=CHAR}");
        }
        
        if (record.getGrantPriv() != null) {
            sql.VALUES("Grant_priv", "#{grantPriv,jdbcType=CHAR}");
        }
        
        if (record.getReferencesPriv() != null) {
            sql.VALUES("References_priv", "#{referencesPriv,jdbcType=CHAR}");
        }
        
        if (record.getIndexPriv() != null) {
            sql.VALUES("Index_priv", "#{indexPriv,jdbcType=CHAR}");
        }
        
        if (record.getAlterPriv() != null) {
            sql.VALUES("Alter_priv", "#{alterPriv,jdbcType=CHAR}");
        }
        
        if (record.getShowDbPriv() != null) {
            sql.VALUES("Show_db_priv", "#{showDbPriv,jdbcType=CHAR}");
        }
        
        if (record.getSuperPriv() != null) {
            sql.VALUES("Super_priv", "#{superPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateTmpTablePriv() != null) {
            sql.VALUES("Create_tmp_table_priv", "#{createTmpTablePriv,jdbcType=CHAR}");
        }
        
        if (record.getLockTablesPriv() != null) {
            sql.VALUES("Lock_tables_priv", "#{lockTablesPriv,jdbcType=CHAR}");
        }
        
        if (record.getExecutePriv() != null) {
            sql.VALUES("Execute_priv", "#{executePriv,jdbcType=CHAR}");
        }
        
        if (record.getReplSlavePriv() != null) {
            sql.VALUES("Repl_slave_priv", "#{replSlavePriv,jdbcType=CHAR}");
        }
        
        if (record.getReplClientPriv() != null) {
            sql.VALUES("Repl_client_priv", "#{replClientPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateViewPriv() != null) {
            sql.VALUES("Create_view_priv", "#{createViewPriv,jdbcType=CHAR}");
        }
        
        if (record.getShowViewPriv() != null) {
            sql.VALUES("Show_view_priv", "#{showViewPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateRoutinePriv() != null) {
            sql.VALUES("Create_routine_priv", "#{createRoutinePriv,jdbcType=CHAR}");
        }
        
        if (record.getAlterRoutinePriv() != null) {
            sql.VALUES("Alter_routine_priv", "#{alterRoutinePriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateUserPriv() != null) {
            sql.VALUES("Create_user_priv", "#{createUserPriv,jdbcType=CHAR}");
        }
        
        if (record.getEventPriv() != null) {
            sql.VALUES("Event_priv", "#{eventPriv,jdbcType=CHAR}");
        }
        
        if (record.getTriggerPriv() != null) {
            sql.VALUES("Trigger_priv", "#{triggerPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateTablespacePriv() != null) {
            sql.VALUES("Create_tablespace_priv", "#{createTablespacePriv,jdbcType=CHAR}");
        }
        
        if (record.getSslType() != null) {
            sql.VALUES("ssl_type", "#{sslType,jdbcType=CHAR}");
        }
        
        if (record.getMaxQuestions() != null) {
            sql.VALUES("max_questions", "#{maxQuestions,jdbcType=INTEGER}");
        }
        
        if (record.getMaxUpdates() != null) {
            sql.VALUES("max_updates", "#{maxUpdates,jdbcType=INTEGER}");
        }
        
        if (record.getMaxConnections() != null) {
            sql.VALUES("max_connections", "#{maxConnections,jdbcType=INTEGER}");
        }
        
        if (record.getMaxUserConnections() != null) {
            sql.VALUES("max_user_connections", "#{maxUserConnections,jdbcType=INTEGER}");
        }
        
        if (record.getPlugin() != null) {
            sql.VALUES("plugin", "#{plugin,jdbcType=CHAR}");
        }
        
        if (record.getPasswordExpired() != null) {
            sql.VALUES("password_expired", "#{passwordExpired,jdbcType=CHAR}");
        }
        
        if (record.getPasswordLastChanged() != null) {
            sql.VALUES("password_last_changed", "#{passwordLastChanged,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPasswordLifetime() != null) {
            sql.VALUES("password_lifetime", "#{passwordLifetime,jdbcType=SMALLINT}");
        }
        
        if (record.getAccountLocked() != null) {
            sql.VALUES("account_locked", "#{accountLocked,jdbcType=CHAR}");
        }
        
        if (record.getSslCipher() != null) {
            sql.VALUES("ssl_cipher", "#{sslCipher,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getX509Issuer() != null) {
            sql.VALUES("x509_issuer", "#{x509Issuer,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getX509Subject() != null) {
            sql.VALUES("x509_subject", "#{x509Subject,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getAuthenticationString() != null) {
            sql.VALUES("authentication_string", "#{authenticationString,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String selectByExampleWithBLOBs(UserEntityExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("Host");
        } else {
            sql.SELECT("Host");
        }
        sql.SELECT("User");
        sql.SELECT("Select_priv");
        sql.SELECT("Insert_priv");
        sql.SELECT("Update_priv");
        sql.SELECT("Delete_priv");
        sql.SELECT("Create_priv");
        sql.SELECT("Drop_priv");
        sql.SELECT("Reload_priv");
        sql.SELECT("Shutdown_priv");
        sql.SELECT("Process_priv");
        sql.SELECT("File_priv");
        sql.SELECT("Grant_priv");
        sql.SELECT("References_priv");
        sql.SELECT("Index_priv");
        sql.SELECT("Alter_priv");
        sql.SELECT("Show_db_priv");
        sql.SELECT("Super_priv");
        sql.SELECT("Create_tmp_table_priv");
        sql.SELECT("Lock_tables_priv");
        sql.SELECT("Execute_priv");
        sql.SELECT("Repl_slave_priv");
        sql.SELECT("Repl_client_priv");
        sql.SELECT("Create_view_priv");
        sql.SELECT("Show_view_priv");
        sql.SELECT("Create_routine_priv");
        sql.SELECT("Alter_routine_priv");
        sql.SELECT("Create_user_priv");
        sql.SELECT("Event_priv");
        sql.SELECT("Trigger_priv");
        sql.SELECT("Create_tablespace_priv");
        sql.SELECT("ssl_type");
        sql.SELECT("max_questions");
        sql.SELECT("max_updates");
        sql.SELECT("max_connections");
        sql.SELECT("max_user_connections");
        sql.SELECT("plugin");
        sql.SELECT("password_expired");
        sql.SELECT("password_last_changed");
        sql.SELECT("password_lifetime");
        sql.SELECT("account_locked");
        sql.SELECT("ssl_cipher");
        sql.SELECT("x509_issuer");
        sql.SELECT("x509_subject");
        sql.SELECT("authentication_string");
        sql.FROM("user");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String selectByExample(UserEntityExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("Host");
        } else {
            sql.SELECT("Host");
        }
        sql.SELECT("User");
        sql.SELECT("Select_priv");
        sql.SELECT("Insert_priv");
        sql.SELECT("Update_priv");
        sql.SELECT("Delete_priv");
        sql.SELECT("Create_priv");
        sql.SELECT("Drop_priv");
        sql.SELECT("Reload_priv");
        sql.SELECT("Shutdown_priv");
        sql.SELECT("Process_priv");
        sql.SELECT("File_priv");
        sql.SELECT("Grant_priv");
        sql.SELECT("References_priv");
        sql.SELECT("Index_priv");
        sql.SELECT("Alter_priv");
        sql.SELECT("Show_db_priv");
        sql.SELECT("Super_priv");
        sql.SELECT("Create_tmp_table_priv");
        sql.SELECT("Lock_tables_priv");
        sql.SELECT("Execute_priv");
        sql.SELECT("Repl_slave_priv");
        sql.SELECT("Repl_client_priv");
        sql.SELECT("Create_view_priv");
        sql.SELECT("Show_view_priv");
        sql.SELECT("Create_routine_priv");
        sql.SELECT("Alter_routine_priv");
        sql.SELECT("Create_user_priv");
        sql.SELECT("Event_priv");
        sql.SELECT("Trigger_priv");
        sql.SELECT("Create_tablespace_priv");
        sql.SELECT("ssl_type");
        sql.SELECT("max_questions");
        sql.SELECT("max_updates");
        sql.SELECT("max_connections");
        sql.SELECT("max_user_connections");
        sql.SELECT("plugin");
        sql.SELECT("password_expired");
        sql.SELECT("password_last_changed");
        sql.SELECT("password_lifetime");
        sql.SELECT("account_locked");
        sql.FROM("user");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        UserEntityWithBLOBs record = (UserEntityWithBLOBs) parameter.get("record");
        UserEntityExample example = (UserEntityExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("user");
        
        if (record.getHost() != null) {
            sql.SET("Host = #{record.host,jdbcType=CHAR}");
        }
        
        if (record.getUser() != null) {
            sql.SET("User = #{record.user,jdbcType=CHAR}");
        }
        
        if (record.getSelectPriv() != null) {
            sql.SET("Select_priv = #{record.selectPriv,jdbcType=CHAR}");
        }
        
        if (record.getInsertPriv() != null) {
            sql.SET("Insert_priv = #{record.insertPriv,jdbcType=CHAR}");
        }
        
        if (record.getUpdatePriv() != null) {
            sql.SET("Update_priv = #{record.updatePriv,jdbcType=CHAR}");
        }
        
        if (record.getDeletePriv() != null) {
            sql.SET("Delete_priv = #{record.deletePriv,jdbcType=CHAR}");
        }
        
        if (record.getCreatePriv() != null) {
            sql.SET("Create_priv = #{record.createPriv,jdbcType=CHAR}");
        }
        
        if (record.getDropPriv() != null) {
            sql.SET("Drop_priv = #{record.dropPriv,jdbcType=CHAR}");
        }
        
        if (record.getReloadPriv() != null) {
            sql.SET("Reload_priv = #{record.reloadPriv,jdbcType=CHAR}");
        }
        
        if (record.getShutdownPriv() != null) {
            sql.SET("Shutdown_priv = #{record.shutdownPriv,jdbcType=CHAR}");
        }
        
        if (record.getProcessPriv() != null) {
            sql.SET("Process_priv = #{record.processPriv,jdbcType=CHAR}");
        }
        
        if (record.getFilePriv() != null) {
            sql.SET("File_priv = #{record.filePriv,jdbcType=CHAR}");
        }
        
        if (record.getGrantPriv() != null) {
            sql.SET("Grant_priv = #{record.grantPriv,jdbcType=CHAR}");
        }
        
        if (record.getReferencesPriv() != null) {
            sql.SET("References_priv = #{record.referencesPriv,jdbcType=CHAR}");
        }
        
        if (record.getIndexPriv() != null) {
            sql.SET("Index_priv = #{record.indexPriv,jdbcType=CHAR}");
        }
        
        if (record.getAlterPriv() != null) {
            sql.SET("Alter_priv = #{record.alterPriv,jdbcType=CHAR}");
        }
        
        if (record.getShowDbPriv() != null) {
            sql.SET("Show_db_priv = #{record.showDbPriv,jdbcType=CHAR}");
        }
        
        if (record.getSuperPriv() != null) {
            sql.SET("Super_priv = #{record.superPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateTmpTablePriv() != null) {
            sql.SET("Create_tmp_table_priv = #{record.createTmpTablePriv,jdbcType=CHAR}");
        }
        
        if (record.getLockTablesPriv() != null) {
            sql.SET("Lock_tables_priv = #{record.lockTablesPriv,jdbcType=CHAR}");
        }
        
        if (record.getExecutePriv() != null) {
            sql.SET("Execute_priv = #{record.executePriv,jdbcType=CHAR}");
        }
        
        if (record.getReplSlavePriv() != null) {
            sql.SET("Repl_slave_priv = #{record.replSlavePriv,jdbcType=CHAR}");
        }
        
        if (record.getReplClientPriv() != null) {
            sql.SET("Repl_client_priv = #{record.replClientPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateViewPriv() != null) {
            sql.SET("Create_view_priv = #{record.createViewPriv,jdbcType=CHAR}");
        }
        
        if (record.getShowViewPriv() != null) {
            sql.SET("Show_view_priv = #{record.showViewPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateRoutinePriv() != null) {
            sql.SET("Create_routine_priv = #{record.createRoutinePriv,jdbcType=CHAR}");
        }
        
        if (record.getAlterRoutinePriv() != null) {
            sql.SET("Alter_routine_priv = #{record.alterRoutinePriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateUserPriv() != null) {
            sql.SET("Create_user_priv = #{record.createUserPriv,jdbcType=CHAR}");
        }
        
        if (record.getEventPriv() != null) {
            sql.SET("Event_priv = #{record.eventPriv,jdbcType=CHAR}");
        }
        
        if (record.getTriggerPriv() != null) {
            sql.SET("Trigger_priv = #{record.triggerPriv,jdbcType=CHAR}");
        }
        
        if (record.getCreateTablespacePriv() != null) {
            sql.SET("Create_tablespace_priv = #{record.createTablespacePriv,jdbcType=CHAR}");
        }
        
        if (record.getSslType() != null) {
            sql.SET("ssl_type = #{record.sslType,jdbcType=CHAR}");
        }
        
        if (record.getMaxQuestions() != null) {
            sql.SET("max_questions = #{record.maxQuestions,jdbcType=INTEGER}");
        }
        
        if (record.getMaxUpdates() != null) {
            sql.SET("max_updates = #{record.maxUpdates,jdbcType=INTEGER}");
        }
        
        if (record.getMaxConnections() != null) {
            sql.SET("max_connections = #{record.maxConnections,jdbcType=INTEGER}");
        }
        
        if (record.getMaxUserConnections() != null) {
            sql.SET("max_user_connections = #{record.maxUserConnections,jdbcType=INTEGER}");
        }
        
        if (record.getPlugin() != null) {
            sql.SET("plugin = #{record.plugin,jdbcType=CHAR}");
        }
        
        if (record.getPasswordExpired() != null) {
            sql.SET("password_expired = #{record.passwordExpired,jdbcType=CHAR}");
        }
        
        if (record.getPasswordLastChanged() != null) {
            sql.SET("password_last_changed = #{record.passwordLastChanged,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPasswordLifetime() != null) {
            sql.SET("password_lifetime = #{record.passwordLifetime,jdbcType=SMALLINT}");
        }
        
        if (record.getAccountLocked() != null) {
            sql.SET("account_locked = #{record.accountLocked,jdbcType=CHAR}");
        }
        
        if (record.getSslCipher() != null) {
            sql.SET("ssl_cipher = #{record.sslCipher,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getX509Issuer() != null) {
            sql.SET("x509_issuer = #{record.x509Issuer,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getX509Subject() != null) {
            sql.SET("x509_subject = #{record.x509Subject,jdbcType=LONGVARBINARY}");
        }
        
        if (record.getAuthenticationString() != null) {
            sql.SET("authentication_string = #{record.authenticationString,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("user");
        
        sql.SET("Host = #{record.host,jdbcType=CHAR}");
        sql.SET("User = #{record.user,jdbcType=CHAR}");
        sql.SET("Select_priv = #{record.selectPriv,jdbcType=CHAR}");
        sql.SET("Insert_priv = #{record.insertPriv,jdbcType=CHAR}");
        sql.SET("Update_priv = #{record.updatePriv,jdbcType=CHAR}");
        sql.SET("Delete_priv = #{record.deletePriv,jdbcType=CHAR}");
        sql.SET("Create_priv = #{record.createPriv,jdbcType=CHAR}");
        sql.SET("Drop_priv = #{record.dropPriv,jdbcType=CHAR}");
        sql.SET("Reload_priv = #{record.reloadPriv,jdbcType=CHAR}");
        sql.SET("Shutdown_priv = #{record.shutdownPriv,jdbcType=CHAR}");
        sql.SET("Process_priv = #{record.processPriv,jdbcType=CHAR}");
        sql.SET("File_priv = #{record.filePriv,jdbcType=CHAR}");
        sql.SET("Grant_priv = #{record.grantPriv,jdbcType=CHAR}");
        sql.SET("References_priv = #{record.referencesPriv,jdbcType=CHAR}");
        sql.SET("Index_priv = #{record.indexPriv,jdbcType=CHAR}");
        sql.SET("Alter_priv = #{record.alterPriv,jdbcType=CHAR}");
        sql.SET("Show_db_priv = #{record.showDbPriv,jdbcType=CHAR}");
        sql.SET("Super_priv = #{record.superPriv,jdbcType=CHAR}");
        sql.SET("Create_tmp_table_priv = #{record.createTmpTablePriv,jdbcType=CHAR}");
        sql.SET("Lock_tables_priv = #{record.lockTablesPriv,jdbcType=CHAR}");
        sql.SET("Execute_priv = #{record.executePriv,jdbcType=CHAR}");
        sql.SET("Repl_slave_priv = #{record.replSlavePriv,jdbcType=CHAR}");
        sql.SET("Repl_client_priv = #{record.replClientPriv,jdbcType=CHAR}");
        sql.SET("Create_view_priv = #{record.createViewPriv,jdbcType=CHAR}");
        sql.SET("Show_view_priv = #{record.showViewPriv,jdbcType=CHAR}");
        sql.SET("Create_routine_priv = #{record.createRoutinePriv,jdbcType=CHAR}");
        sql.SET("Alter_routine_priv = #{record.alterRoutinePriv,jdbcType=CHAR}");
        sql.SET("Create_user_priv = #{record.createUserPriv,jdbcType=CHAR}");
        sql.SET("Event_priv = #{record.eventPriv,jdbcType=CHAR}");
        sql.SET("Trigger_priv = #{record.triggerPriv,jdbcType=CHAR}");
        sql.SET("Create_tablespace_priv = #{record.createTablespacePriv,jdbcType=CHAR}");
        sql.SET("ssl_type = #{record.sslType,jdbcType=CHAR}");
        sql.SET("max_questions = #{record.maxQuestions,jdbcType=INTEGER}");
        sql.SET("max_updates = #{record.maxUpdates,jdbcType=INTEGER}");
        sql.SET("max_connections = #{record.maxConnections,jdbcType=INTEGER}");
        sql.SET("max_user_connections = #{record.maxUserConnections,jdbcType=INTEGER}");
        sql.SET("plugin = #{record.plugin,jdbcType=CHAR}");
        sql.SET("password_expired = #{record.passwordExpired,jdbcType=CHAR}");
        sql.SET("password_last_changed = #{record.passwordLastChanged,jdbcType=TIMESTAMP}");
        sql.SET("password_lifetime = #{record.passwordLifetime,jdbcType=SMALLINT}");
        sql.SET("account_locked = #{record.accountLocked,jdbcType=CHAR}");
        sql.SET("ssl_cipher = #{record.sslCipher,jdbcType=LONGVARBINARY}");
        sql.SET("x509_issuer = #{record.x509Issuer,jdbcType=LONGVARBINARY}");
        sql.SET("x509_subject = #{record.x509Subject,jdbcType=LONGVARBINARY}");
        sql.SET("authentication_string = #{record.authenticationString,jdbcType=LONGVARCHAR}");
        
        UserEntityExample example = (UserEntityExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("user");
        
        sql.SET("Host = #{record.host,jdbcType=CHAR}");
        sql.SET("User = #{record.user,jdbcType=CHAR}");
        sql.SET("Select_priv = #{record.selectPriv,jdbcType=CHAR}");
        sql.SET("Insert_priv = #{record.insertPriv,jdbcType=CHAR}");
        sql.SET("Update_priv = #{record.updatePriv,jdbcType=CHAR}");
        sql.SET("Delete_priv = #{record.deletePriv,jdbcType=CHAR}");
        sql.SET("Create_priv = #{record.createPriv,jdbcType=CHAR}");
        sql.SET("Drop_priv = #{record.dropPriv,jdbcType=CHAR}");
        sql.SET("Reload_priv = #{record.reloadPriv,jdbcType=CHAR}");
        sql.SET("Shutdown_priv = #{record.shutdownPriv,jdbcType=CHAR}");
        sql.SET("Process_priv = #{record.processPriv,jdbcType=CHAR}");
        sql.SET("File_priv = #{record.filePriv,jdbcType=CHAR}");
        sql.SET("Grant_priv = #{record.grantPriv,jdbcType=CHAR}");
        sql.SET("References_priv = #{record.referencesPriv,jdbcType=CHAR}");
        sql.SET("Index_priv = #{record.indexPriv,jdbcType=CHAR}");
        sql.SET("Alter_priv = #{record.alterPriv,jdbcType=CHAR}");
        sql.SET("Show_db_priv = #{record.showDbPriv,jdbcType=CHAR}");
        sql.SET("Super_priv = #{record.superPriv,jdbcType=CHAR}");
        sql.SET("Create_tmp_table_priv = #{record.createTmpTablePriv,jdbcType=CHAR}");
        sql.SET("Lock_tables_priv = #{record.lockTablesPriv,jdbcType=CHAR}");
        sql.SET("Execute_priv = #{record.executePriv,jdbcType=CHAR}");
        sql.SET("Repl_slave_priv = #{record.replSlavePriv,jdbcType=CHAR}");
        sql.SET("Repl_client_priv = #{record.replClientPriv,jdbcType=CHAR}");
        sql.SET("Create_view_priv = #{record.createViewPriv,jdbcType=CHAR}");
        sql.SET("Show_view_priv = #{record.showViewPriv,jdbcType=CHAR}");
        sql.SET("Create_routine_priv = #{record.createRoutinePriv,jdbcType=CHAR}");
        sql.SET("Alter_routine_priv = #{record.alterRoutinePriv,jdbcType=CHAR}");
        sql.SET("Create_user_priv = #{record.createUserPriv,jdbcType=CHAR}");
        sql.SET("Event_priv = #{record.eventPriv,jdbcType=CHAR}");
        sql.SET("Trigger_priv = #{record.triggerPriv,jdbcType=CHAR}");
        sql.SET("Create_tablespace_priv = #{record.createTablespacePriv,jdbcType=CHAR}");
        sql.SET("ssl_type = #{record.sslType,jdbcType=CHAR}");
        sql.SET("max_questions = #{record.maxQuestions,jdbcType=INTEGER}");
        sql.SET("max_updates = #{record.maxUpdates,jdbcType=INTEGER}");
        sql.SET("max_connections = #{record.maxConnections,jdbcType=INTEGER}");
        sql.SET("max_user_connections = #{record.maxUserConnections,jdbcType=INTEGER}");
        sql.SET("plugin = #{record.plugin,jdbcType=CHAR}");
        sql.SET("password_expired = #{record.passwordExpired,jdbcType=CHAR}");
        sql.SET("password_last_changed = #{record.passwordLastChanged,jdbcType=TIMESTAMP}");
        sql.SET("password_lifetime = #{record.passwordLifetime,jdbcType=SMALLINT}");
        sql.SET("account_locked = #{record.accountLocked,jdbcType=CHAR}");
        
        UserEntityExample example = (UserEntityExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Wed Jan 02 16:07:16 CST 2019
     */
    protected void applyWhere(SQL sql, UserEntityExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}